// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plugnmeet_create_room.proto

package plugnmeet

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateRoomReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRoomReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoomReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateRoomReqMultiError, or
// nil if none found.
func (m *CreateRoomReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoomReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoomReqValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoomReqValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoomReqValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.EmptyTimeout != nil {
		// no validation rules for EmptyTimeout
	}

	if m.MaxParticipants != nil {
		// no validation rules for MaxParticipants
	}

	if len(errors) > 0 {
		return CreateRoomReqMultiError(errors)
	}

	return nil
}

// CreateRoomReqMultiError is an error wrapping multiple validation errors
// returned by CreateRoomReq.ValidateAll() if the designated constraints
// aren't met.
type CreateRoomReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoomReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoomReqMultiError) AllErrors() []error { return m }

// CreateRoomReqValidationError is the validation error returned by
// CreateRoomReq.Validate if the designated constraints aren't met.
type CreateRoomReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoomReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoomReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoomReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoomReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoomReqValidationError) ErrorName() string { return "CreateRoomReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateRoomReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoomReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoomReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoomReqValidationError{}

// Validate checks the field values on RoomMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoomMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoomMetadataMultiError, or
// nil if none found.
func (m *RoomMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomTitle

	// no validation rules for IsRecording

	// no validation rules for IsActiveRtmp

	// no validation rules for ParentRoomId

	// no validation rules for IsBreakoutRoom

	// no validation rules for StartedAt

	if all {
		switch v := interface{}(m.GetRoomFeatures()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomMetadataValidationError{
					field:  "RoomFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomMetadataValidationError{
					field:  "RoomFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoomFeatures()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomMetadataValidationError{
				field:  "RoomFeatures",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDefaultLockSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomMetadataValidationError{
					field:  "DefaultLockSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomMetadataValidationError{
					field:  "DefaultLockSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefaultLockSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomMetadataValidationError{
				field:  "DefaultLockSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCopyrightConf()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomMetadataValidationError{
					field:  "CopyrightConf",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomMetadataValidationError{
					field:  "CopyrightConf",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCopyrightConf()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomMetadataValidationError{
				field:  "CopyrightConf",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.WelcomeMessage != nil {
		// no validation rules for WelcomeMessage
	}

	if m.WebhookUrl != nil {
		// no validation rules for WebhookUrl
	}

	if m.LogoutUrl != nil {
		// no validation rules for LogoutUrl
	}

	if m.MetadataId != nil {
		// no validation rules for MetadataId
	}

	if m.ExtraData != nil {
		// no validation rules for ExtraData
	}

	if len(errors) > 0 {
		return RoomMetadataMultiError(errors)
	}

	return nil
}

// RoomMetadataMultiError is an error wrapping multiple validation errors
// returned by RoomMetadata.ValidateAll() if the designated constraints aren't met.
type RoomMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomMetadataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomMetadataMultiError) AllErrors() []error { return m }

// RoomMetadataValidationError is the validation error returned by
// RoomMetadata.Validate if the designated constraints aren't met.
type RoomMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomMetadataValidationError) ErrorName() string { return "RoomMetadataValidationError" }

// Error satisfies the builtin error interface
func (e RoomMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomMetadataValidationError{}

// Validate checks the field values on RoomCreateFeatures with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoomCreateFeatures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomCreateFeatures with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomCreateFeaturesMultiError, or nil if none found.
func (m *RoomCreateFeatures) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomCreateFeatures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AllowWebcams

	// no validation rules for MuteOnStart

	// no validation rules for AllowScreenShare

	// no validation rules for AllowRtmp

	// no validation rules for AllowViewOtherWebcams

	// no validation rules for AllowViewOtherUsersList

	// no validation rules for AdminOnlyWebcams

	// no validation rules for AllowPolls

	// no validation rules for EnableAnalytics

	if all {
		switch v := interface{}(m.GetRecordingFeatures()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "RecordingFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "RecordingFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecordingFeatures()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomCreateFeaturesValidationError{
				field:  "RecordingFeatures",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetChatFeatures()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "ChatFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "ChatFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChatFeatures()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomCreateFeaturesValidationError{
				field:  "ChatFeatures",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSharedNotePadFeatures()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "SharedNotePadFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "SharedNotePadFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedNotePadFeatures()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomCreateFeaturesValidationError{
				field:  "SharedNotePadFeatures",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWhiteboardFeatures()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "WhiteboardFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "WhiteboardFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWhiteboardFeatures()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomCreateFeaturesValidationError{
				field:  "WhiteboardFeatures",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExternalMediaPlayerFeatures()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "ExternalMediaPlayerFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "ExternalMediaPlayerFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExternalMediaPlayerFeatures()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomCreateFeaturesValidationError{
				field:  "ExternalMediaPlayerFeatures",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWaitingRoomFeatures()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "WaitingRoomFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "WaitingRoomFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWaitingRoomFeatures()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomCreateFeaturesValidationError{
				field:  "WaitingRoomFeatures",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBreakoutRoomFeatures()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "BreakoutRoomFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "BreakoutRoomFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBreakoutRoomFeatures()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomCreateFeaturesValidationError{
				field:  "BreakoutRoomFeatures",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDisplayExternalLinkFeatures()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "DisplayExternalLinkFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "DisplayExternalLinkFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDisplayExternalLinkFeatures()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomCreateFeaturesValidationError{
				field:  "DisplayExternalLinkFeatures",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIngressFeatures()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "IngressFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "IngressFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIngressFeatures()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomCreateFeaturesValidationError{
				field:  "IngressFeatures",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpeechToTextTranslationFeatures()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "SpeechToTextTranslationFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "SpeechToTextTranslationFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpeechToTextTranslationFeatures()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomCreateFeaturesValidationError{
				field:  "SpeechToTextTranslationFeatures",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndToEndEncryptionFeatures()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "EndToEndEncryptionFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "EndToEndEncryptionFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndToEndEncryptionFeatures()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomCreateFeaturesValidationError{
				field:  "EndToEndEncryptionFeatures",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPollsFeatures()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "PollsFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomCreateFeaturesValidationError{
					field:  "PollsFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPollsFeatures()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomCreateFeaturesValidationError{
				field:  "PollsFeatures",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RoomDuration != nil {
		// no validation rules for RoomDuration
	}

	if m.AllowVirtualBg != nil {
		// no validation rules for AllowVirtualBg
	}

	if m.AllowRaiseHand != nil {
		// no validation rules for AllowRaiseHand
	}

	if m.AutoGenUserId != nil {
		// no validation rules for AutoGenUserId
	}

	if len(errors) > 0 {
		return RoomCreateFeaturesMultiError(errors)
	}

	return nil
}

// RoomCreateFeaturesMultiError is an error wrapping multiple validation errors
// returned by RoomCreateFeatures.ValidateAll() if the designated constraints
// aren't met.
type RoomCreateFeaturesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomCreateFeaturesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomCreateFeaturesMultiError) AllErrors() []error { return m }

// RoomCreateFeaturesValidationError is the validation error returned by
// RoomCreateFeatures.Validate if the designated constraints aren't met.
type RoomCreateFeaturesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomCreateFeaturesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomCreateFeaturesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomCreateFeaturesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomCreateFeaturesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomCreateFeaturesValidationError) ErrorName() string {
	return "RoomCreateFeaturesValidationError"
}

// Error satisfies the builtin error interface
func (e RoomCreateFeaturesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomCreateFeatures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomCreateFeaturesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomCreateFeaturesValidationError{}

// Validate checks the field values on ChatFeatures with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatFeatures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatFeatures with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatFeaturesMultiError, or
// nil if none found.
func (m *ChatFeatures) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatFeatures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AllowChat

	// no validation rules for AllowFileUpload

	if m.MaxFileSize != nil {
		// no validation rules for MaxFileSize
	}

	if len(errors) > 0 {
		return ChatFeaturesMultiError(errors)
	}

	return nil
}

// ChatFeaturesMultiError is an error wrapping multiple validation errors
// returned by ChatFeatures.ValidateAll() if the designated constraints aren't met.
type ChatFeaturesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatFeaturesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatFeaturesMultiError) AllErrors() []error { return m }

// ChatFeaturesValidationError is the validation error returned by
// ChatFeatures.Validate if the designated constraints aren't met.
type ChatFeaturesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatFeaturesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatFeaturesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatFeaturesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatFeaturesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatFeaturesValidationError) ErrorName() string { return "ChatFeaturesValidationError" }

// Error satisfies the builtin error interface
func (e ChatFeaturesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatFeatures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatFeaturesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatFeaturesValidationError{}

// Validate checks the field values on SharedNotePadFeatures with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SharedNotePadFeatures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharedNotePadFeatures with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SharedNotePadFeaturesMultiError, or nil if none found.
func (m *SharedNotePadFeatures) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedNotePadFeatures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AllowedSharedNotePad

	// no validation rules for IsActive

	// no validation rules for Visible

	// no validation rules for NodeId

	// no validation rules for Host

	// no validation rules for NotePadId

	// no validation rules for ReadOnlyPadId

	if len(errors) > 0 {
		return SharedNotePadFeaturesMultiError(errors)
	}

	return nil
}

// SharedNotePadFeaturesMultiError is an error wrapping multiple validation
// errors returned by SharedNotePadFeatures.ValidateAll() if the designated
// constraints aren't met.
type SharedNotePadFeaturesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedNotePadFeaturesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedNotePadFeaturesMultiError) AllErrors() []error { return m }

// SharedNotePadFeaturesValidationError is the validation error returned by
// SharedNotePadFeatures.Validate if the designated constraints aren't met.
type SharedNotePadFeaturesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedNotePadFeaturesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedNotePadFeaturesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedNotePadFeaturesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedNotePadFeaturesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedNotePadFeaturesValidationError) ErrorName() string {
	return "SharedNotePadFeaturesValidationError"
}

// Error satisfies the builtin error interface
func (e SharedNotePadFeaturesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedNotePadFeatures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedNotePadFeaturesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedNotePadFeaturesValidationError{}

// Validate checks the field values on WhiteboardFeatures with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WhiteboardFeatures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhiteboardFeatures with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WhiteboardFeaturesMultiError, or nil if none found.
func (m *WhiteboardFeatures) ValidateAll() error {
	return m.validate(true)
}

func (m *WhiteboardFeatures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AllowedWhiteboard

	// no validation rules for Visible

	// no validation rules for WhiteboardFileId

	// no validation rules for FileName

	// no validation rules for FilePath

	// no validation rules for TotalPages

	if m.PreloadFile != nil {
		// no validation rules for PreloadFile
	}

	if m.MaxAllowedFileSize != nil {
		// no validation rules for MaxAllowedFileSize
	}

	if len(errors) > 0 {
		return WhiteboardFeaturesMultiError(errors)
	}

	return nil
}

// WhiteboardFeaturesMultiError is an error wrapping multiple validation errors
// returned by WhiteboardFeatures.ValidateAll() if the designated constraints
// aren't met.
type WhiteboardFeaturesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhiteboardFeaturesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhiteboardFeaturesMultiError) AllErrors() []error { return m }

// WhiteboardFeaturesValidationError is the validation error returned by
// WhiteboardFeatures.Validate if the designated constraints aren't met.
type WhiteboardFeaturesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhiteboardFeaturesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhiteboardFeaturesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhiteboardFeaturesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhiteboardFeaturesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhiteboardFeaturesValidationError) ErrorName() string {
	return "WhiteboardFeaturesValidationError"
}

// Error satisfies the builtin error interface
func (e WhiteboardFeaturesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhiteboardFeatures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhiteboardFeaturesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhiteboardFeaturesValidationError{}

// Validate checks the field values on ExternalMediaPlayerFeatures with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExternalMediaPlayerFeatures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExternalMediaPlayerFeatures with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExternalMediaPlayerFeaturesMultiError, or nil if none found.
func (m *ExternalMediaPlayerFeatures) ValidateAll() error {
	return m.validate(true)
}

func (m *ExternalMediaPlayerFeatures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AllowedExternalMediaPlayer

	// no validation rules for IsActive

	if m.SharedBy != nil {
		// no validation rules for SharedBy
	}

	if m.Url != nil {
		// no validation rules for Url
	}

	if len(errors) > 0 {
		return ExternalMediaPlayerFeaturesMultiError(errors)
	}

	return nil
}

// ExternalMediaPlayerFeaturesMultiError is an error wrapping multiple
// validation errors returned by ExternalMediaPlayerFeatures.ValidateAll() if
// the designated constraints aren't met.
type ExternalMediaPlayerFeaturesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExternalMediaPlayerFeaturesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExternalMediaPlayerFeaturesMultiError) AllErrors() []error { return m }

// ExternalMediaPlayerFeaturesValidationError is the validation error returned
// by ExternalMediaPlayerFeatures.Validate if the designated constraints
// aren't met.
type ExternalMediaPlayerFeaturesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExternalMediaPlayerFeaturesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExternalMediaPlayerFeaturesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExternalMediaPlayerFeaturesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExternalMediaPlayerFeaturesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExternalMediaPlayerFeaturesValidationError) ErrorName() string {
	return "ExternalMediaPlayerFeaturesValidationError"
}

// Error satisfies the builtin error interface
func (e ExternalMediaPlayerFeaturesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExternalMediaPlayerFeatures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExternalMediaPlayerFeaturesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExternalMediaPlayerFeaturesValidationError{}

// Validate checks the field values on WaitingRoomFeatures with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WaitingRoomFeatures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WaitingRoomFeatures with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WaitingRoomFeaturesMultiError, or nil if none found.
func (m *WaitingRoomFeatures) ValidateAll() error {
	return m.validate(true)
}

func (m *WaitingRoomFeatures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsActive

	// no validation rules for WaitingRoomMsg

	if len(errors) > 0 {
		return WaitingRoomFeaturesMultiError(errors)
	}

	return nil
}

// WaitingRoomFeaturesMultiError is an error wrapping multiple validation
// errors returned by WaitingRoomFeatures.ValidateAll() if the designated
// constraints aren't met.
type WaitingRoomFeaturesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WaitingRoomFeaturesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WaitingRoomFeaturesMultiError) AllErrors() []error { return m }

// WaitingRoomFeaturesValidationError is the validation error returned by
// WaitingRoomFeatures.Validate if the designated constraints aren't met.
type WaitingRoomFeaturesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WaitingRoomFeaturesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WaitingRoomFeaturesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WaitingRoomFeaturesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WaitingRoomFeaturesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WaitingRoomFeaturesValidationError) ErrorName() string {
	return "WaitingRoomFeaturesValidationError"
}

// Error satisfies the builtin error interface
func (e WaitingRoomFeaturesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWaitingRoomFeatures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WaitingRoomFeaturesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WaitingRoomFeaturesValidationError{}

// Validate checks the field values on BreakoutRoomFeatures with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BreakoutRoomFeatures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BreakoutRoomFeatures with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BreakoutRoomFeaturesMultiError, or nil if none found.
func (m *BreakoutRoomFeatures) ValidateAll() error {
	return m.validate(true)
}

func (m *BreakoutRoomFeatures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAllow

	// no validation rules for IsActive

	// no validation rules for AllowedNumberRooms

	if len(errors) > 0 {
		return BreakoutRoomFeaturesMultiError(errors)
	}

	return nil
}

// BreakoutRoomFeaturesMultiError is an error wrapping multiple validation
// errors returned by BreakoutRoomFeatures.ValidateAll() if the designated
// constraints aren't met.
type BreakoutRoomFeaturesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BreakoutRoomFeaturesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BreakoutRoomFeaturesMultiError) AllErrors() []error { return m }

// BreakoutRoomFeaturesValidationError is the validation error returned by
// BreakoutRoomFeatures.Validate if the designated constraints aren't met.
type BreakoutRoomFeaturesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BreakoutRoomFeaturesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BreakoutRoomFeaturesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BreakoutRoomFeaturesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BreakoutRoomFeaturesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BreakoutRoomFeaturesValidationError) ErrorName() string {
	return "BreakoutRoomFeaturesValidationError"
}

// Error satisfies the builtin error interface
func (e BreakoutRoomFeaturesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBreakoutRoomFeatures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BreakoutRoomFeaturesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BreakoutRoomFeaturesValidationError{}

// Validate checks the field values on DisplayExternalLinkFeatures with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisplayExternalLinkFeatures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisplayExternalLinkFeatures with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisplayExternalLinkFeaturesMultiError, or nil if none found.
func (m *DisplayExternalLinkFeatures) ValidateAll() error {
	return m.validate(true)
}

func (m *DisplayExternalLinkFeatures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAllow

	// no validation rules for IsActive

	if m.Link != nil {
		// no validation rules for Link
	}

	if m.SharedBy != nil {
		// no validation rules for SharedBy
	}

	if len(errors) > 0 {
		return DisplayExternalLinkFeaturesMultiError(errors)
	}

	return nil
}

// DisplayExternalLinkFeaturesMultiError is an error wrapping multiple
// validation errors returned by DisplayExternalLinkFeatures.ValidateAll() if
// the designated constraints aren't met.
type DisplayExternalLinkFeaturesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisplayExternalLinkFeaturesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisplayExternalLinkFeaturesMultiError) AllErrors() []error { return m }

// DisplayExternalLinkFeaturesValidationError is the validation error returned
// by DisplayExternalLinkFeatures.Validate if the designated constraints
// aren't met.
type DisplayExternalLinkFeaturesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisplayExternalLinkFeaturesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisplayExternalLinkFeaturesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisplayExternalLinkFeaturesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisplayExternalLinkFeaturesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisplayExternalLinkFeaturesValidationError) ErrorName() string {
	return "DisplayExternalLinkFeaturesValidationError"
}

// Error satisfies the builtin error interface
func (e DisplayExternalLinkFeaturesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisplayExternalLinkFeatures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisplayExternalLinkFeaturesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisplayExternalLinkFeaturesValidationError{}

// Validate checks the field values on RecordingFeatures with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RecordingFeatures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordingFeatures with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordingFeaturesMultiError, or nil if none found.
func (m *RecordingFeatures) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordingFeatures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAllow

	// no validation rules for IsAllowCloud

	// no validation rules for EnableAutoCloudRecording

	// no validation rules for IsAllowLocal

	// no validation rules for OnlyRecordAdminWebcams

	if len(errors) > 0 {
		return RecordingFeaturesMultiError(errors)
	}

	return nil
}

// RecordingFeaturesMultiError is an error wrapping multiple validation errors
// returned by RecordingFeatures.ValidateAll() if the designated constraints
// aren't met.
type RecordingFeaturesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordingFeaturesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordingFeaturesMultiError) AllErrors() []error { return m }

// RecordingFeaturesValidationError is the validation error returned by
// RecordingFeatures.Validate if the designated constraints aren't met.
type RecordingFeaturesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordingFeaturesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordingFeaturesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordingFeaturesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordingFeaturesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordingFeaturesValidationError) ErrorName() string {
	return "RecordingFeaturesValidationError"
}

// Error satisfies the builtin error interface
func (e RecordingFeaturesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordingFeatures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordingFeaturesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordingFeaturesValidationError{}

// Validate checks the field values on IngressFeatures with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IngressFeatures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IngressFeatures with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IngressFeaturesMultiError, or nil if none found.
func (m *IngressFeatures) ValidateAll() error {
	return m.validate(true)
}

func (m *IngressFeatures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAllow

	// no validation rules for InputType

	// no validation rules for Url

	// no validation rules for StreamKey

	if len(errors) > 0 {
		return IngressFeaturesMultiError(errors)
	}

	return nil
}

// IngressFeaturesMultiError is an error wrapping multiple validation errors
// returned by IngressFeatures.ValidateAll() if the designated constraints
// aren't met.
type IngressFeaturesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IngressFeaturesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IngressFeaturesMultiError) AllErrors() []error { return m }

// IngressFeaturesValidationError is the validation error returned by
// IngressFeatures.Validate if the designated constraints aren't met.
type IngressFeaturesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngressFeaturesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngressFeaturesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngressFeaturesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngressFeaturesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngressFeaturesValidationError) ErrorName() string { return "IngressFeaturesValidationError" }

// Error satisfies the builtin error interface
func (e IngressFeaturesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngressFeatures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngressFeaturesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngressFeaturesValidationError{}

// Validate checks the field values on SpeechToTextTranslationFeatures with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpeechToTextTranslationFeatures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpeechToTextTranslationFeatures with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SpeechToTextTranslationFeaturesMultiError, or nil if none found.
func (m *SpeechToTextTranslationFeatures) ValidateAll() error {
	return m.validate(true)
}

func (m *SpeechToTextTranslationFeatures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAllow

	// no validation rules for IsAllowTranslation

	// no validation rules for IsEnabled

	// no validation rules for IsEnabledTranslation

	// no validation rules for MaxNumTranLangsAllowSelecting

	if m.DefaultSubtitleLang != nil {
		// no validation rules for DefaultSubtitleLang
	}

	if len(errors) > 0 {
		return SpeechToTextTranslationFeaturesMultiError(errors)
	}

	return nil
}

// SpeechToTextTranslationFeaturesMultiError is an error wrapping multiple
// validation errors returned by SpeechToTextTranslationFeatures.ValidateAll()
// if the designated constraints aren't met.
type SpeechToTextTranslationFeaturesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpeechToTextTranslationFeaturesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpeechToTextTranslationFeaturesMultiError) AllErrors() []error { return m }

// SpeechToTextTranslationFeaturesValidationError is the validation error
// returned by SpeechToTextTranslationFeatures.Validate if the designated
// constraints aren't met.
type SpeechToTextTranslationFeaturesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpeechToTextTranslationFeaturesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpeechToTextTranslationFeaturesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpeechToTextTranslationFeaturesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpeechToTextTranslationFeaturesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpeechToTextTranslationFeaturesValidationError) ErrorName() string {
	return "SpeechToTextTranslationFeaturesValidationError"
}

// Error satisfies the builtin error interface
func (e SpeechToTextTranslationFeaturesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpeechToTextTranslationFeatures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpeechToTextTranslationFeaturesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpeechToTextTranslationFeaturesValidationError{}

// Validate checks the field values on EndToEndEncryptionFeatures with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EndToEndEncryptionFeatures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndToEndEncryptionFeatures with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EndToEndEncryptionFeaturesMultiError, or nil if none found.
func (m *EndToEndEncryptionFeatures) ValidateAll() error {
	return m.validate(true)
}

func (m *EndToEndEncryptionFeatures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsEnabled

	// no validation rules for IncludedChatMessages

	// no validation rules for IncludedWhiteboard

	// no validation rules for EnabledSelfInsertEncryptionKey

	if m.EncryptionKey != nil {
		// no validation rules for EncryptionKey
	}

	if len(errors) > 0 {
		return EndToEndEncryptionFeaturesMultiError(errors)
	}

	return nil
}

// EndToEndEncryptionFeaturesMultiError is an error wrapping multiple
// validation errors returned by EndToEndEncryptionFeatures.ValidateAll() if
// the designated constraints aren't met.
type EndToEndEncryptionFeaturesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndToEndEncryptionFeaturesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndToEndEncryptionFeaturesMultiError) AllErrors() []error { return m }

// EndToEndEncryptionFeaturesValidationError is the validation error returned
// by EndToEndEncryptionFeatures.Validate if the designated constraints aren't met.
type EndToEndEncryptionFeaturesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndToEndEncryptionFeaturesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndToEndEncryptionFeaturesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndToEndEncryptionFeaturesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndToEndEncryptionFeaturesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndToEndEncryptionFeaturesValidationError) ErrorName() string {
	return "EndToEndEncryptionFeaturesValidationError"
}

// Error satisfies the builtin error interface
func (e EndToEndEncryptionFeaturesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndToEndEncryptionFeatures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndToEndEncryptionFeaturesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndToEndEncryptionFeaturesValidationError{}

// Validate checks the field values on PollsFeatures with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PollsFeatures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PollsFeatures with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PollsFeaturesMultiError, or
// nil if none found.
func (m *PollsFeatures) ValidateAll() error {
	return m.validate(true)
}

func (m *PollsFeatures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAllow

	// no validation rules for IsActive

	if len(errors) > 0 {
		return PollsFeaturesMultiError(errors)
	}

	return nil
}

// PollsFeaturesMultiError is an error wrapping multiple validation errors
// returned by PollsFeatures.ValidateAll() if the designated constraints
// aren't met.
type PollsFeaturesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PollsFeaturesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PollsFeaturesMultiError) AllErrors() []error { return m }

// PollsFeaturesValidationError is the validation error returned by
// PollsFeatures.Validate if the designated constraints aren't met.
type PollsFeaturesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PollsFeaturesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PollsFeaturesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PollsFeaturesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PollsFeaturesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PollsFeaturesValidationError) ErrorName() string { return "PollsFeaturesValidationError" }

// Error satisfies the builtin error interface
func (e PollsFeaturesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPollsFeatures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PollsFeaturesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PollsFeaturesValidationError{}

// Validate checks the field values on CopyrightConf with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CopyrightConf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CopyrightConf with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CopyrightConfMultiError, or
// nil if none found.
func (m *CopyrightConf) ValidateAll() error {
	return m.validate(true)
}

func (m *CopyrightConf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Display

	// no validation rules for Text

	if len(errors) > 0 {
		return CopyrightConfMultiError(errors)
	}

	return nil
}

// CopyrightConfMultiError is an error wrapping multiple validation errors
// returned by CopyrightConf.ValidateAll() if the designated constraints
// aren't met.
type CopyrightConfMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CopyrightConfMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CopyrightConfMultiError) AllErrors() []error { return m }

// CopyrightConfValidationError is the validation error returned by
// CopyrightConf.Validate if the designated constraints aren't met.
type CopyrightConfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CopyrightConfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CopyrightConfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CopyrightConfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CopyrightConfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CopyrightConfValidationError) ErrorName() string { return "CopyrightConfValidationError" }

// Error satisfies the builtin error interface
func (e CopyrightConfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCopyrightConf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CopyrightConfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CopyrightConfValidationError{}

// Validate checks the field values on CreateRoomRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRoomRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoomRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateRoomResMultiError, or
// nil if none found.
func (m *CreateRoomRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoomRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetRoomInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoomResValidationError{
					field:  "RoomInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoomResValidationError{
					field:  "RoomInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoomInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoomResValidationError{
				field:  "RoomInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRoomResMultiError(errors)
	}

	return nil
}

// CreateRoomResMultiError is an error wrapping multiple validation errors
// returned by CreateRoomRes.ValidateAll() if the designated constraints
// aren't met.
type CreateRoomResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoomResMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoomResMultiError) AllErrors() []error { return m }

// CreateRoomResValidationError is the validation error returned by
// CreateRoomRes.Validate if the designated constraints aren't met.
type CreateRoomResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoomResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoomResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoomResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoomResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoomResValidationError) ErrorName() string { return "CreateRoomResValidationError" }

// Error satisfies the builtin error interface
func (e CreateRoomResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoomRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoomResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoomResValidationError{}
