// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: plugnmeet_recorder.proto

package plugnmeet

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecordingTasks int32

const (
	RecordingTasks_START_RECORDING     RecordingTasks = 0
	RecordingTasks_STOP_RECORDING      RecordingTasks = 1
	RecordingTasks_START_RTMP          RecordingTasks = 2
	RecordingTasks_STOP_RTMP           RecordingTasks = 3
	RecordingTasks_END_RECORDING       RecordingTasks = 4
	RecordingTasks_END_RTMP            RecordingTasks = 5
	RecordingTasks_RECORDING_PROCEEDED RecordingTasks = 6
	RecordingTasks_STOP                RecordingTasks = 7
)

// Enum value maps for RecordingTasks.
var (
	RecordingTasks_name = map[int32]string{
		0: "START_RECORDING",
		1: "STOP_RECORDING",
		2: "START_RTMP",
		3: "STOP_RTMP",
		4: "END_RECORDING",
		5: "END_RTMP",
		6: "RECORDING_PROCEEDED",
		7: "STOP",
	}
	RecordingTasks_value = map[string]int32{
		"START_RECORDING":     0,
		"STOP_RECORDING":      1,
		"START_RTMP":          2,
		"STOP_RTMP":           3,
		"END_RECORDING":       4,
		"END_RTMP":            5,
		"RECORDING_PROCEEDED": 6,
		"STOP":                7,
	}
)

func (x RecordingTasks) Enum() *RecordingTasks {
	p := new(RecordingTasks)
	*p = x
	return p
}

func (x RecordingTasks) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordingTasks) Descriptor() protoreflect.EnumDescriptor {
	return file_plugnmeet_recorder_proto_enumTypes[0].Descriptor()
}

func (RecordingTasks) Type() protoreflect.EnumType {
	return &file_plugnmeet_recorder_proto_enumTypes[0]
}

func (x RecordingTasks) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordingTasks.Descriptor instead.
func (RecordingTasks) EnumDescriptor() ([]byte, []int) {
	return file_plugnmeet_recorder_proto_rawDescGZIP(), []int{0}
}

type RecorderInfoKeys int32

const (
	RecorderInfoKeys_RECORDER_INFO_MAX_LIMIT        RecorderInfoKeys = 0
	RecorderInfoKeys_RECORDER_INFO_LAST_PING        RecorderInfoKeys = 1
	RecorderInfoKeys_RECORDER_INFO_CURRENT_PROGRESS RecorderInfoKeys = 3
)

// Enum value maps for RecorderInfoKeys.
var (
	RecorderInfoKeys_name = map[int32]string{
		0: "RECORDER_INFO_MAX_LIMIT",
		1: "RECORDER_INFO_LAST_PING",
		3: "RECORDER_INFO_CURRENT_PROGRESS",
	}
	RecorderInfoKeys_value = map[string]int32{
		"RECORDER_INFO_MAX_LIMIT":        0,
		"RECORDER_INFO_LAST_PING":        1,
		"RECORDER_INFO_CURRENT_PROGRESS": 3,
	}
)

func (x RecorderInfoKeys) Enum() *RecorderInfoKeys {
	p := new(RecorderInfoKeys)
	*p = x
	return p
}

func (x RecorderInfoKeys) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecorderInfoKeys) Descriptor() protoreflect.EnumDescriptor {
	return file_plugnmeet_recorder_proto_enumTypes[1].Descriptor()
}

func (RecorderInfoKeys) Type() protoreflect.EnumType {
	return &file_plugnmeet_recorder_proto_enumTypes[1]
}

func (x RecorderInfoKeys) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecorderInfoKeys.Descriptor instead.
func (RecorderInfoKeys) EnumDescriptor() ([]byte, []int) {
	return file_plugnmeet_recorder_proto_rawDescGZIP(), []int{1}
}

type PlugNmeetToRecorder struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          string                 `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Task          RecordingTasks         `protobuf:"varint,2,opt,name=task,proto3,enum=plugnmeet.RecordingTasks" json:"task,omitempty"`
	RoomTableId   int64                  `protobuf:"varint,3,opt,name=room_table_id,json=roomTableId,proto3" json:"room_table_id,omitempty"`
	RoomId        string                 `protobuf:"bytes,4,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomSid       string                 `protobuf:"bytes,5,opt,name=room_sid,json=roomSid,proto3" json:"room_sid,omitempty"`
	RecordingId   string                 `protobuf:"bytes,6,opt,name=recording_id,json=recordingId,proto3" json:"recording_id,omitempty"`
	RecorderId    string                 `protobuf:"bytes,7,opt,name=recorder_id,json=recorderId,proto3" json:"recorder_id,omitempty"`
	AccessToken   string                 `protobuf:"bytes,8,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	RtmpUrl       *string                `protobuf:"bytes,9,opt,name=rtmp_url,json=rtmpUrl,proto3,oneof" json:"rtmp_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlugNmeetToRecorder) Reset() {
	*x = PlugNmeetToRecorder{}
	mi := &file_plugnmeet_recorder_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlugNmeetToRecorder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlugNmeetToRecorder) ProtoMessage() {}

func (x *PlugNmeetToRecorder) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_recorder_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlugNmeetToRecorder.ProtoReflect.Descriptor instead.
func (*PlugNmeetToRecorder) Descriptor() ([]byte, []int) {
	return file_plugnmeet_recorder_proto_rawDescGZIP(), []int{0}
}

func (x *PlugNmeetToRecorder) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *PlugNmeetToRecorder) GetTask() RecordingTasks {
	if x != nil {
		return x.Task
	}
	return RecordingTasks_START_RECORDING
}

func (x *PlugNmeetToRecorder) GetRoomTableId() int64 {
	if x != nil {
		return x.RoomTableId
	}
	return 0
}

func (x *PlugNmeetToRecorder) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *PlugNmeetToRecorder) GetRoomSid() string {
	if x != nil {
		return x.RoomSid
	}
	return ""
}

func (x *PlugNmeetToRecorder) GetRecordingId() string {
	if x != nil {
		return x.RecordingId
	}
	return ""
}

func (x *PlugNmeetToRecorder) GetRecorderId() string {
	if x != nil {
		return x.RecorderId
	}
	return ""
}

func (x *PlugNmeetToRecorder) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *PlugNmeetToRecorder) GetRtmpUrl() string {
	if x != nil && x.RtmpUrl != nil {
		return *x.RtmpUrl
	}
	return ""
}

type RecorderToPlugNmeet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          string                 `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Task          RecordingTasks         `protobuf:"varint,2,opt,name=task,proto3,enum=plugnmeet.RecordingTasks" json:"task,omitempty"`
	Status        bool                   `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Msg           string                 `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
	RecordingId   string                 `protobuf:"bytes,5,opt,name=recording_id,json=recordingId,proto3" json:"recording_id,omitempty"`
	RoomTableId   int64                  `protobuf:"varint,11,opt,name=room_table_id,json=roomTableId,proto3" json:"room_table_id,omitempty"`
	RoomId        string                 `protobuf:"bytes,6,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomSid       string                 `protobuf:"bytes,7,opt,name=room_sid,json=roomSid,proto3" json:"room_sid,omitempty"`
	RecorderId    string                 `protobuf:"bytes,8,opt,name=recorder_id,json=recorderId,proto3" json:"recorder_id,omitempty"`
	FilePath      string                 `protobuf:"bytes,9,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	FileSize      float32                `protobuf:"fixed32,10,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"` // next key 12
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecorderToPlugNmeet) Reset() {
	*x = RecorderToPlugNmeet{}
	mi := &file_plugnmeet_recorder_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecorderToPlugNmeet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecorderToPlugNmeet) ProtoMessage() {}

func (x *RecorderToPlugNmeet) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_recorder_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecorderToPlugNmeet.ProtoReflect.Descriptor instead.
func (*RecorderToPlugNmeet) Descriptor() ([]byte, []int) {
	return file_plugnmeet_recorder_proto_rawDescGZIP(), []int{1}
}

func (x *RecorderToPlugNmeet) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *RecorderToPlugNmeet) GetTask() RecordingTasks {
	if x != nil {
		return x.Task
	}
	return RecordingTasks_START_RECORDING
}

func (x *RecorderToPlugNmeet) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *RecorderToPlugNmeet) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RecorderToPlugNmeet) GetRecordingId() string {
	if x != nil {
		return x.RecordingId
	}
	return ""
}

func (x *RecorderToPlugNmeet) GetRoomTableId() int64 {
	if x != nil {
		return x.RoomTableId
	}
	return 0
}

func (x *RecorderToPlugNmeet) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *RecorderToPlugNmeet) GetRoomSid() string {
	if x != nil {
		return x.RoomSid
	}
	return ""
}

func (x *RecorderToPlugNmeet) GetRecorderId() string {
	if x != nil {
		return x.RecorderId
	}
	return ""
}

func (x *RecorderToPlugNmeet) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *RecorderToPlugNmeet) GetFileSize() float32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

var File_plugnmeet_recorder_proto protoreflect.FileDescriptor

const file_plugnmeet_recorder_proto_rawDesc = "" +
	"\n" +
	"\x18plugnmeet_recorder.proto\x12\tplugnmeet\"\xc4\x02\n" +
	"\x13PlugNmeetToRecorder\x12\x12\n" +
	"\x04from\x18\x01 \x01(\tR\x04from\x12-\n" +
	"\x04task\x18\x02 \x01(\x0e2\x19.plugnmeet.RecordingTasksR\x04task\x12\"\n" +
	"\rroom_table_id\x18\x03 \x01(\x03R\vroomTableId\x12\x17\n" +
	"\aroom_id\x18\x04 \x01(\tR\x06roomId\x12\x19\n" +
	"\broom_sid\x18\x05 \x01(\tR\aroomSid\x12!\n" +
	"\frecording_id\x18\x06 \x01(\tR\vrecordingId\x12\x1f\n" +
	"\vrecorder_id\x18\a \x01(\tR\n" +
	"recorderId\x12!\n" +
	"\faccess_token\x18\b \x01(\tR\vaccessToken\x12\x1e\n" +
	"\brtmp_url\x18\t \x01(\tH\x00R\artmpUrl\x88\x01\x01B\v\n" +
	"\t_rtmp_url\"\xd8\x02\n" +
	"\x13RecorderToPlugNmeet\x12\x12\n" +
	"\x04from\x18\x01 \x01(\tR\x04from\x12-\n" +
	"\x04task\x18\x02 \x01(\x0e2\x19.plugnmeet.RecordingTasksR\x04task\x12\x16\n" +
	"\x06status\x18\x03 \x01(\bR\x06status\x12\x10\n" +
	"\x03msg\x18\x04 \x01(\tR\x03msg\x12!\n" +
	"\frecording_id\x18\x05 \x01(\tR\vrecordingId\x12\"\n" +
	"\rroom_table_id\x18\v \x01(\x03R\vroomTableId\x12\x17\n" +
	"\aroom_id\x18\x06 \x01(\tR\x06roomId\x12\x19\n" +
	"\broom_sid\x18\a \x01(\tR\aroomSid\x12\x1f\n" +
	"\vrecorder_id\x18\b \x01(\tR\n" +
	"recorderId\x12\x1b\n" +
	"\tfile_path\x18\t \x01(\tR\bfilePath\x12\x1b\n" +
	"\tfile_size\x18\n" +
	" \x01(\x02R\bfileSize*\x9c\x01\n" +
	"\x0eRecordingTasks\x12\x13\n" +
	"\x0fSTART_RECORDING\x10\x00\x12\x12\n" +
	"\x0eSTOP_RECORDING\x10\x01\x12\x0e\n" +
	"\n" +
	"START_RTMP\x10\x02\x12\r\n" +
	"\tSTOP_RTMP\x10\x03\x12\x11\n" +
	"\rEND_RECORDING\x10\x04\x12\f\n" +
	"\bEND_RTMP\x10\x05\x12\x17\n" +
	"\x13RECORDING_PROCEEDED\x10\x06\x12\b\n" +
	"\x04STOP\x10\a*p\n" +
	"\x10RecorderInfoKeys\x12\x1b\n" +
	"\x17RECORDER_INFO_MAX_LIMIT\x10\x00\x12\x1b\n" +
	"\x17RECORDER_INFO_LAST_PING\x10\x01\x12\"\n" +
	"\x1eRECORDER_INFO_CURRENT_PROGRESS\x10\x03B\x9f\x01\n" +
	"\rcom.plugnmeetB\x16PlugnmeetRecorderProtoP\x01Z2github.com/mynaparrot/plugnmeet-protocol/plugnmeet\xa2\x02\x03PXX\xaa\x02\tPlugnmeet\xca\x02\tPlugnmeet\xe2\x02\x15Plugnmeet\\GPBMetadata\xea\x02\tPlugnmeetb\x06proto3"

var (
	file_plugnmeet_recorder_proto_rawDescOnce sync.Once
	file_plugnmeet_recorder_proto_rawDescData []byte
)

func file_plugnmeet_recorder_proto_rawDescGZIP() []byte {
	file_plugnmeet_recorder_proto_rawDescOnce.Do(func() {
		file_plugnmeet_recorder_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_plugnmeet_recorder_proto_rawDesc), len(file_plugnmeet_recorder_proto_rawDesc)))
	})
	return file_plugnmeet_recorder_proto_rawDescData
}

var file_plugnmeet_recorder_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_plugnmeet_recorder_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_plugnmeet_recorder_proto_goTypes = []any{
	(RecordingTasks)(0),         // 0: plugnmeet.RecordingTasks
	(RecorderInfoKeys)(0),       // 1: plugnmeet.RecorderInfoKeys
	(*PlugNmeetToRecorder)(nil), // 2: plugnmeet.PlugNmeetToRecorder
	(*RecorderToPlugNmeet)(nil), // 3: plugnmeet.RecorderToPlugNmeet
}
var file_plugnmeet_recorder_proto_depIdxs = []int32{
	0, // 0: plugnmeet.PlugNmeetToRecorder.task:type_name -> plugnmeet.RecordingTasks
	0, // 1: plugnmeet.RecorderToPlugNmeet.task:type_name -> plugnmeet.RecordingTasks
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_plugnmeet_recorder_proto_init() }
func file_plugnmeet_recorder_proto_init() {
	if File_plugnmeet_recorder_proto != nil {
		return
	}
	file_plugnmeet_recorder_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_plugnmeet_recorder_proto_rawDesc), len(file_plugnmeet_recorder_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_plugnmeet_recorder_proto_goTypes,
		DependencyIndexes: file_plugnmeet_recorder_proto_depIdxs,
		EnumInfos:         file_plugnmeet_recorder_proto_enumTypes,
		MessageInfos:      file_plugnmeet_recorder_proto_msgTypes,
	}.Build()
	File_plugnmeet_recorder_proto = out.File
	file_plugnmeet_recorder_proto_goTypes = nil
	file_plugnmeet_recorder_proto_depIdxs = nil
}
