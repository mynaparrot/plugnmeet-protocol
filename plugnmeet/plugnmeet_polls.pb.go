// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: plugnmeet_polls.proto

package plugnmeet

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActivatePollsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomId        string                 `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	IsActive      bool                   `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivatePollsReq) Reset() {
	*x = ActivatePollsReq{}
	mi := &file_plugnmeet_polls_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivatePollsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivatePollsReq) ProtoMessage() {}

func (x *ActivatePollsReq) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_polls_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivatePollsReq.ProtoReflect.Descriptor instead.
func (*ActivatePollsReq) Descriptor() ([]byte, []int) {
	return file_plugnmeet_polls_proto_rawDescGZIP(), []int{0}
}

func (x *ActivatePollsReq) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *ActivatePollsReq) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type CreatePollReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomId        string                 `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PollId        string                 `protobuf:"bytes,3,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
	Question      string                 `protobuf:"bytes,4,opt,name=question,proto3" json:"question,omitempty"`
	Options       []*CreatePollOptions   `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePollReq) Reset() {
	*x = CreatePollReq{}
	mi := &file_plugnmeet_polls_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePollReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePollReq) ProtoMessage() {}

func (x *CreatePollReq) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_polls_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePollReq.ProtoReflect.Descriptor instead.
func (*CreatePollReq) Descriptor() ([]byte, []int) {
	return file_plugnmeet_polls_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePollReq) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *CreatePollReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreatePollReq) GetPollId() string {
	if x != nil {
		return x.PollId
	}
	return ""
}

func (x *CreatePollReq) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *CreatePollReq) GetOptions() []*CreatePollOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type CreatePollOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Text          string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePollOptions) Reset() {
	*x = CreatePollOptions{}
	mi := &file_plugnmeet_polls_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePollOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePollOptions) ProtoMessage() {}

func (x *CreatePollOptions) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_polls_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePollOptions.ProtoReflect.Descriptor instead.
func (*CreatePollOptions) Descriptor() ([]byte, []int) {
	return file_plugnmeet_polls_proto_rawDescGZIP(), []int{2}
}

func (x *CreatePollOptions) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreatePollOptions) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type PollInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RoomId        string                 `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	Question      string                 `protobuf:"bytes,3,opt,name=question,proto3" json:"question,omitempty"`
	Options       []*CreatePollOptions   `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
	IsRunning     bool                   `protobuf:"varint,5,opt,name=is_running,json=isRunning,proto3" json:"is_running,omitempty"`
	Created       int64                  `protobuf:"varint,6,opt,name=created,proto3" json:"created,omitempty"`
	CreatedBy     string                 `protobuf:"bytes,7,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	ClosedBy      string                 `protobuf:"bytes,8,opt,name=closed_by,json=closedBy,proto3" json:"closed_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollInfo) Reset() {
	*x = PollInfo{}
	mi := &file_plugnmeet_polls_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollInfo) ProtoMessage() {}

func (x *PollInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_polls_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollInfo.ProtoReflect.Descriptor instead.
func (*PollInfo) Descriptor() ([]byte, []int) {
	return file_plugnmeet_polls_proto_rawDescGZIP(), []int{3}
}

func (x *PollInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PollInfo) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *PollInfo) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *PollInfo) GetOptions() []*CreatePollOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *PollInfo) GetIsRunning() bool {
	if x != nil {
		return x.IsRunning
	}
	return false
}

func (x *PollInfo) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *PollInfo) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PollInfo) GetClosedBy() string {
	if x != nil {
		return x.ClosedBy
	}
	return ""
}

type SubmitPollResponseReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RoomId         string                 `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	UserId         string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name           string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	PollId         string                 `protobuf:"bytes,4,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
	SelectedOption uint64                 `protobuf:"varint,5,opt,name=selected_option,json=selectedOption,proto3" json:"selected_option,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubmitPollResponseReq) Reset() {
	*x = SubmitPollResponseReq{}
	mi := &file_plugnmeet_polls_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitPollResponseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitPollResponseReq) ProtoMessage() {}

func (x *SubmitPollResponseReq) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_polls_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitPollResponseReq.ProtoReflect.Descriptor instead.
func (*SubmitPollResponseReq) Descriptor() ([]byte, []int) {
	return file_plugnmeet_polls_proto_rawDescGZIP(), []int{4}
}

func (x *SubmitPollResponseReq) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *SubmitPollResponseReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SubmitPollResponseReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubmitPollResponseReq) GetPollId() string {
	if x != nil {
		return x.PollId
	}
	return ""
}

func (x *SubmitPollResponseReq) GetSelectedOption() uint64 {
	if x != nil {
		return x.SelectedOption
	}
	return 0
}

type ClosePollReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomId        string                 `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PollId        string                 `protobuf:"bytes,3,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClosePollReq) Reset() {
	*x = ClosePollReq{}
	mi := &file_plugnmeet_polls_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClosePollReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosePollReq) ProtoMessage() {}

func (x *ClosePollReq) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_polls_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClosePollReq.ProtoReflect.Descriptor instead.
func (*ClosePollReq) Descriptor() ([]byte, []int) {
	return file_plugnmeet_polls_proto_rawDescGZIP(), []int{5}
}

func (x *ClosePollReq) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *ClosePollReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ClosePollReq) GetPollId() string {
	if x != nil {
		return x.PollId
	}
	return ""
}

type PollResponsesResultOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Text          string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	VoteCount     uint64                 `protobuf:"varint,3,opt,name=vote_count,json=voteCount,proto3" json:"vote_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollResponsesResultOptions) Reset() {
	*x = PollResponsesResultOptions{}
	mi := &file_plugnmeet_polls_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollResponsesResultOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollResponsesResultOptions) ProtoMessage() {}

func (x *PollResponsesResultOptions) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_polls_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollResponsesResultOptions.ProtoReflect.Descriptor instead.
func (*PollResponsesResultOptions) Descriptor() ([]byte, []int) {
	return file_plugnmeet_polls_proto_rawDescGZIP(), []int{6}
}

func (x *PollResponsesResultOptions) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PollResponsesResultOptions) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *PollResponsesResultOptions) GetVoteCount() uint64 {
	if x != nil {
		return x.VoteCount
	}
	return 0
}

type PollResponsesResult struct {
	state          protoimpl.MessageState        `protogen:"open.v1"`
	Question       string                        `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	TotalResponses uint64                        `protobuf:"varint,2,opt,name=total_responses,json=totalResponses,proto3" json:"total_responses,omitempty"`
	Options        []*PollResponsesResultOptions `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PollResponsesResult) Reset() {
	*x = PollResponsesResult{}
	mi := &file_plugnmeet_polls_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollResponsesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollResponsesResult) ProtoMessage() {}

func (x *PollResponsesResult) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_polls_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollResponsesResult.ProtoReflect.Descriptor instead.
func (*PollResponsesResult) Descriptor() ([]byte, []int) {
	return file_plugnmeet_polls_proto_rawDescGZIP(), []int{7}
}

func (x *PollResponsesResult) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *PollResponsesResult) GetTotalResponses() uint64 {
	if x != nil {
		return x.TotalResponses
	}
	return 0
}

func (x *PollResponsesResult) GetOptions() []*PollResponsesResultOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type PollsStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalPolls    uint64                 `protobuf:"varint,1,opt,name=total_polls,json=totalPolls,proto3" json:"total_polls,omitempty"`
	TotalRunning  uint64                 `protobuf:"varint,2,opt,name=total_running,json=totalRunning,proto3" json:"total_running,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollsStats) Reset() {
	*x = PollsStats{}
	mi := &file_plugnmeet_polls_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollsStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollsStats) ProtoMessage() {}

func (x *PollsStats) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_polls_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollsStats.ProtoReflect.Descriptor instead.
func (*PollsStats) Descriptor() ([]byte, []int) {
	return file_plugnmeet_polls_proto_rawDescGZIP(), []int{8}
}

func (x *PollsStats) GetTotalPolls() uint64 {
	if x != nil {
		return x.TotalPolls
	}
	return 0
}

func (x *PollsStats) GetTotalRunning() uint64 {
	if x != nil {
		return x.TotalRunning
	}
	return 0
}

type PollResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Status              bool                   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                 string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	PollId              *string                `protobuf:"bytes,3,opt,name=poll_id,json=pollId,proto3,oneof" json:"poll_id,omitempty"`
	TotalResponses      *uint64                `protobuf:"varint,4,opt,name=total_responses,json=totalResponses,proto3,oneof" json:"total_responses,omitempty"`
	Voted               *uint64                `protobuf:"varint,5,opt,name=voted,proto3,oneof" json:"voted,omitempty"`
	Responses           map[string]string      `protobuf:"bytes,6,rep,name=responses,proto3" json:"responses,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Polls               []*PollInfo            `protobuf:"bytes,7,rep,name=polls,proto3" json:"polls,omitempty"`
	Stats               *PollsStats            `protobuf:"bytes,8,opt,name=stats,proto3,oneof" json:"stats,omitempty"`
	TotalPolls          *uint64                `protobuf:"varint,9,opt,name=total_polls,json=totalPolls,proto3,oneof" json:"total_polls,omitempty"`
	TotalRunning        *uint64                `protobuf:"varint,10,opt,name=total_running,json=totalRunning,proto3,oneof" json:"total_running,omitempty"`
	PollResponsesResult *PollResponsesResult   `protobuf:"bytes,11,opt,name=poll_responses_result,json=pollResponsesResult,proto3,oneof" json:"poll_responses_result,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PollResponse) Reset() {
	*x = PollResponse{}
	mi := &file_plugnmeet_polls_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollResponse) ProtoMessage() {}

func (x *PollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_polls_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollResponse.ProtoReflect.Descriptor instead.
func (*PollResponse) Descriptor() ([]byte, []int) {
	return file_plugnmeet_polls_proto_rawDescGZIP(), []int{9}
}

func (x *PollResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *PollResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PollResponse) GetPollId() string {
	if x != nil && x.PollId != nil {
		return *x.PollId
	}
	return ""
}

func (x *PollResponse) GetTotalResponses() uint64 {
	if x != nil && x.TotalResponses != nil {
		return *x.TotalResponses
	}
	return 0
}

func (x *PollResponse) GetVoted() uint64 {
	if x != nil && x.Voted != nil {
		return *x.Voted
	}
	return 0
}

func (x *PollResponse) GetResponses() map[string]string {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *PollResponse) GetPolls() []*PollInfo {
	if x != nil {
		return x.Polls
	}
	return nil
}

func (x *PollResponse) GetStats() *PollsStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *PollResponse) GetTotalPolls() uint64 {
	if x != nil && x.TotalPolls != nil {
		return *x.TotalPolls
	}
	return 0
}

func (x *PollResponse) GetTotalRunning() uint64 {
	if x != nil && x.TotalRunning != nil {
		return *x.TotalRunning
	}
	return 0
}

func (x *PollResponse) GetPollResponsesResult() *PollResponsesResult {
	if x != nil {
		return x.PollResponsesResult
	}
	return nil
}

var File_plugnmeet_polls_proto protoreflect.FileDescriptor

const file_plugnmeet_polls_proto_rawDesc = "" +
	"\n" +
	"\x15plugnmeet_polls.proto\x12\tplugnmeet\"H\n" +
	"\x10ActivatePollsReq\x12\x17\n" +
	"\aroom_id\x18\x01 \x01(\tR\x06roomId\x12\x1b\n" +
	"\tis_active\x18\x02 \x01(\bR\bisActive\"\xae\x01\n" +
	"\rCreatePollReq\x12\x17\n" +
	"\aroom_id\x18\x01 \x01(\tR\x06roomId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x17\n" +
	"\apoll_id\x18\x03 \x01(\tR\x06pollId\x12\x1a\n" +
	"\bquestion\x18\x04 \x01(\tR\bquestion\x126\n" +
	"\aoptions\x18\x05 \x03(\v2\x1c.plugnmeet.CreatePollOptionsR\aoptions\"7\n" +
	"\x11CreatePollOptions\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x12\n" +
	"\x04text\x18\x02 \x01(\tR\x04text\"\xfc\x01\n" +
	"\bPollInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x17\n" +
	"\aroom_id\x18\x02 \x01(\tR\x06roomId\x12\x1a\n" +
	"\bquestion\x18\x03 \x01(\tR\bquestion\x126\n" +
	"\aoptions\x18\x04 \x03(\v2\x1c.plugnmeet.CreatePollOptionsR\aoptions\x12\x1d\n" +
	"\n" +
	"is_running\x18\x05 \x01(\bR\tisRunning\x12\x18\n" +
	"\acreated\x18\x06 \x01(\x03R\acreated\x12\x1d\n" +
	"\n" +
	"created_by\x18\a \x01(\tR\tcreatedBy\x12\x1b\n" +
	"\tclosed_by\x18\b \x01(\tR\bclosedBy\"\x9f\x01\n" +
	"\x15SubmitPollResponseReq\x12\x17\n" +
	"\aroom_id\x18\x01 \x01(\tR\x06roomId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x17\n" +
	"\apoll_id\x18\x04 \x01(\tR\x06pollId\x12'\n" +
	"\x0fselected_option\x18\x05 \x01(\x04R\x0eselectedOption\"Y\n" +
	"\fClosePollReq\x12\x17\n" +
	"\aroom_id\x18\x01 \x01(\tR\x06roomId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x17\n" +
	"\apoll_id\x18\x03 \x01(\tR\x06pollId\"_\n" +
	"\x1aPollResponsesResultOptions\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x04R\x02id\x12\x12\n" +
	"\x04text\x18\x02 \x01(\tR\x04text\x12\x1d\n" +
	"\n" +
	"vote_count\x18\x03 \x01(\x04R\tvoteCount\"\x9b\x01\n" +
	"\x13PollResponsesResult\x12\x1a\n" +
	"\bquestion\x18\x01 \x01(\tR\bquestion\x12'\n" +
	"\x0ftotal_responses\x18\x02 \x01(\x04R\x0etotalResponses\x12?\n" +
	"\aoptions\x18\x03 \x03(\v2%.plugnmeet.PollResponsesResultOptionsR\aoptions\"R\n" +
	"\n" +
	"PollsStats\x12\x1f\n" +
	"\vtotal_polls\x18\x01 \x01(\x04R\n" +
	"totalPolls\x12#\n" +
	"\rtotal_running\x18\x02 \x01(\x04R\ftotalRunning\"\x99\x05\n" +
	"\fPollResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\bR\x06status\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x12\x1c\n" +
	"\apoll_id\x18\x03 \x01(\tH\x00R\x06pollId\x88\x01\x01\x12,\n" +
	"\x0ftotal_responses\x18\x04 \x01(\x04H\x01R\x0etotalResponses\x88\x01\x01\x12\x19\n" +
	"\x05voted\x18\x05 \x01(\x04H\x02R\x05voted\x88\x01\x01\x12D\n" +
	"\tresponses\x18\x06 \x03(\v2&.plugnmeet.PollResponse.ResponsesEntryR\tresponses\x12)\n" +
	"\x05polls\x18\a \x03(\v2\x13.plugnmeet.PollInfoR\x05polls\x120\n" +
	"\x05stats\x18\b \x01(\v2\x15.plugnmeet.PollsStatsH\x03R\x05stats\x88\x01\x01\x12$\n" +
	"\vtotal_polls\x18\t \x01(\x04H\x04R\n" +
	"totalPolls\x88\x01\x01\x12(\n" +
	"\rtotal_running\x18\n" +
	" \x01(\x04H\x05R\ftotalRunning\x88\x01\x01\x12W\n" +
	"\x15poll_responses_result\x18\v \x01(\v2\x1e.plugnmeet.PollResponsesResultH\x06R\x13pollResponsesResult\x88\x01\x01\x1a<\n" +
	"\x0eResponsesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\n" +
	"\n" +
	"\b_poll_idB\x12\n" +
	"\x10_total_responsesB\b\n" +
	"\x06_votedB\b\n" +
	"\x06_statsB\x0e\n" +
	"\f_total_pollsB\x10\n" +
	"\x0e_total_runningB\x18\n" +
	"\x16_poll_responses_resultB\x9c\x01\n" +
	"\rcom.plugnmeetB\x13PlugnmeetPollsProtoP\x01Z2github.com/mynaparrot/plugnmeet-protocol/plugnmeet\xa2\x02\x03PXX\xaa\x02\tPlugnmeet\xca\x02\tPlugnmeet\xe2\x02\x15Plugnmeet\\GPBMetadata\xea\x02\tPlugnmeetb\x06proto3"

var (
	file_plugnmeet_polls_proto_rawDescOnce sync.Once
	file_plugnmeet_polls_proto_rawDescData []byte
)

func file_plugnmeet_polls_proto_rawDescGZIP() []byte {
	file_plugnmeet_polls_proto_rawDescOnce.Do(func() {
		file_plugnmeet_polls_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_plugnmeet_polls_proto_rawDesc), len(file_plugnmeet_polls_proto_rawDesc)))
	})
	return file_plugnmeet_polls_proto_rawDescData
}

var file_plugnmeet_polls_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_plugnmeet_polls_proto_goTypes = []any{
	(*ActivatePollsReq)(nil),           // 0: plugnmeet.ActivatePollsReq
	(*CreatePollReq)(nil),              // 1: plugnmeet.CreatePollReq
	(*CreatePollOptions)(nil),          // 2: plugnmeet.CreatePollOptions
	(*PollInfo)(nil),                   // 3: plugnmeet.PollInfo
	(*SubmitPollResponseReq)(nil),      // 4: plugnmeet.SubmitPollResponseReq
	(*ClosePollReq)(nil),               // 5: plugnmeet.ClosePollReq
	(*PollResponsesResultOptions)(nil), // 6: plugnmeet.PollResponsesResultOptions
	(*PollResponsesResult)(nil),        // 7: plugnmeet.PollResponsesResult
	(*PollsStats)(nil),                 // 8: plugnmeet.PollsStats
	(*PollResponse)(nil),               // 9: plugnmeet.PollResponse
	nil,                                // 10: plugnmeet.PollResponse.ResponsesEntry
}
var file_plugnmeet_polls_proto_depIdxs = []int32{
	2,  // 0: plugnmeet.CreatePollReq.options:type_name -> plugnmeet.CreatePollOptions
	2,  // 1: plugnmeet.PollInfo.options:type_name -> plugnmeet.CreatePollOptions
	6,  // 2: plugnmeet.PollResponsesResult.options:type_name -> plugnmeet.PollResponsesResultOptions
	10, // 3: plugnmeet.PollResponse.responses:type_name -> plugnmeet.PollResponse.ResponsesEntry
	3,  // 4: plugnmeet.PollResponse.polls:type_name -> plugnmeet.PollInfo
	8,  // 5: plugnmeet.PollResponse.stats:type_name -> plugnmeet.PollsStats
	7,  // 6: plugnmeet.PollResponse.poll_responses_result:type_name -> plugnmeet.PollResponsesResult
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_plugnmeet_polls_proto_init() }
func file_plugnmeet_polls_proto_init() {
	if File_plugnmeet_polls_proto != nil {
		return
	}
	file_plugnmeet_polls_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_plugnmeet_polls_proto_rawDesc), len(file_plugnmeet_polls_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_plugnmeet_polls_proto_goTypes,
		DependencyIndexes: file_plugnmeet_polls_proto_depIdxs,
		MessageInfos:      file_plugnmeet_polls_proto_msgTypes,
	}.Build()
	File_plugnmeet_polls_proto = out.File
	file_plugnmeet_polls_proto_goTypes = nil
	file_plugnmeet_polls_proto_depIdxs = nil
}
