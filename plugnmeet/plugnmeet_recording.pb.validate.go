// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plugnmeet_recording.proto

package plugnmeet

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RecordingReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RecordingReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordingReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RecordingReqMultiError, or
// nil if none found.
func (m *RecordingReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordingReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Task

	// no validation rules for RoomId

	// no validation rules for RoomTableId

	// no validation rules for Sid

	if m.RtmpUrl != nil {
		// no validation rules for RtmpUrl
	}

	if m.CustomDesign != nil {
		// no validation rules for CustomDesign
	}

	if m.RecordingVariant != nil {
		// no validation rules for RecordingVariant
	}

	if len(errors) > 0 {
		return RecordingReqMultiError(errors)
	}

	return nil
}

// RecordingReqMultiError is an error wrapping multiple validation errors
// returned by RecordingReq.ValidateAll() if the designated constraints aren't met.
type RecordingReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordingReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordingReqMultiError) AllErrors() []error { return m }

// RecordingReqValidationError is the validation error returned by
// RecordingReq.Validate if the designated constraints aren't met.
type RecordingReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordingReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordingReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordingReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordingReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordingReqValidationError) ErrorName() string { return "RecordingReqValidationError" }

// Error satisfies the builtin error interface
func (e RecordingReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordingReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordingReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordingReqValidationError{}

// Validate checks the field values on RecordingInfoFile with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RecordingInfoFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordingInfoFile with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordingInfoFileMultiError, or nil if none found.
func (m *RecordingInfoFile) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordingInfoFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomTableId

	// no validation rules for RoomId

	// no validation rules for RoomTitle

	// no validation rules for RoomSid

	// no validation rules for RoomCreationTime

	// no validation rules for RoomEnded

	// no validation rules for RecordingId

	// no validation rules for RecorderId

	// no validation rules for FilePath

	// no validation rules for FileSize

	// no validation rules for CreationTime

	if len(errors) > 0 {
		return RecordingInfoFileMultiError(errors)
	}

	return nil
}

// RecordingInfoFileMultiError is an error wrapping multiple validation errors
// returned by RecordingInfoFile.ValidateAll() if the designated constraints
// aren't met.
type RecordingInfoFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordingInfoFileMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordingInfoFileMultiError) AllErrors() []error { return m }

// RecordingInfoFileValidationError is the validation error returned by
// RecordingInfoFile.Validate if the designated constraints aren't met.
type RecordingInfoFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordingInfoFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordingInfoFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordingInfoFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordingInfoFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordingInfoFileValidationError) ErrorName() string {
	return "RecordingInfoFileValidationError"
}

// Error satisfies the builtin error interface
func (e RecordingInfoFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordingInfoFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordingInfoFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordingInfoFileValidationError{}
