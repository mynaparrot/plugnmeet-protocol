// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: plugnmeet_common.proto

package plugnmeet

import (
	livekit "github.com/livekit/protocol/livekit"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommonNotifyEvent struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Event         *string                  `protobuf:"bytes,1,opt,name=event,proto3,oneof" json:"event,omitempty"`
	Room          *NotifyEventRoom         `protobuf:"bytes,2,opt,name=room,proto3,oneof" json:"room,omitempty"`
	Participant   *livekit.ParticipantInfo `protobuf:"bytes,3,opt,name=participant,proto3,oneof" json:"participant,omitempty"`
	RecordingInfo *RecordingInfoEvent      `protobuf:"bytes,4,opt,name=recording_info,json=recordingInfo,proto3,oneof" json:"recording_info,omitempty"`
	SpeechService *SpeechServiceEvent      `protobuf:"bytes,5,opt,name=speech_service,json=speechService,proto3,oneof" json:"speech_service,omitempty"`
	Track         *livekit.TrackInfo       `protobuf:"bytes,6,opt,name=track,proto3,oneof" json:"track,omitempty"`
	Analytics     *AnalyticsEvent          `protobuf:"bytes,7,opt,name=analytics,proto3,oneof" json:"analytics,omitempty"`
	Id            *string                  `protobuf:"bytes,9,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt     *int64                   `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommonNotifyEvent) Reset() {
	*x = CommonNotifyEvent{}
	mi := &file_plugnmeet_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommonNotifyEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonNotifyEvent) ProtoMessage() {}

func (x *CommonNotifyEvent) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonNotifyEvent.ProtoReflect.Descriptor instead.
func (*CommonNotifyEvent) Descriptor() ([]byte, []int) {
	return file_plugnmeet_common_proto_rawDescGZIP(), []int{0}
}

func (x *CommonNotifyEvent) GetEvent() string {
	if x != nil && x.Event != nil {
		return *x.Event
	}
	return ""
}

func (x *CommonNotifyEvent) GetRoom() *NotifyEventRoom {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *CommonNotifyEvent) GetParticipant() *livekit.ParticipantInfo {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *CommonNotifyEvent) GetRecordingInfo() *RecordingInfoEvent {
	if x != nil {
		return x.RecordingInfo
	}
	return nil
}

func (x *CommonNotifyEvent) GetSpeechService() *SpeechServiceEvent {
	if x != nil {
		return x.SpeechService
	}
	return nil
}

func (x *CommonNotifyEvent) GetTrack() *livekit.TrackInfo {
	if x != nil {
		return x.Track
	}
	return nil
}

func (x *CommonNotifyEvent) GetAnalytics() *AnalyticsEvent {
	if x != nil {
		return x.Analytics
	}
	return nil
}

func (x *CommonNotifyEvent) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *CommonNotifyEvent) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

type NotifyEventRoom struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Sid             *string                `protobuf:"bytes,1,opt,name=sid,proto3,oneof" json:"sid,omitempty"`
	RoomId          *string                `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3,oneof" json:"room_id,omitempty"`
	EmptyTimeout    *uint32                `protobuf:"varint,3,opt,name=empty_timeout,json=emptyTimeout,proto3,oneof" json:"empty_timeout,omitempty"`
	MaxParticipants *uint32                `protobuf:"varint,4,opt,name=max_participants,json=maxParticipants,proto3,oneof" json:"max_participants,omitempty"`
	CreationTime    *uint64                `protobuf:"varint,5,opt,name=creation_time,json=creationTime,proto3,oneof" json:"creation_time,omitempty"`
	EnabledCodecs   []*livekit.Codec       `protobuf:"bytes,6,rep,name=enabled_codecs,json=enabledCodecs,proto3" json:"enabled_codecs,omitempty"`
	Metadata        *string                `protobuf:"bytes,7,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	NumParticipants *uint32                `protobuf:"varint,8,opt,name=num_participants,json=numParticipants,proto3,oneof" json:"num_participants,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NotifyEventRoom) Reset() {
	*x = NotifyEventRoom{}
	mi := &file_plugnmeet_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifyEventRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyEventRoom) ProtoMessage() {}

func (x *NotifyEventRoom) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyEventRoom.ProtoReflect.Descriptor instead.
func (*NotifyEventRoom) Descriptor() ([]byte, []int) {
	return file_plugnmeet_common_proto_rawDescGZIP(), []int{1}
}

func (x *NotifyEventRoom) GetSid() string {
	if x != nil && x.Sid != nil {
		return *x.Sid
	}
	return ""
}

func (x *NotifyEventRoom) GetRoomId() string {
	if x != nil && x.RoomId != nil {
		return *x.RoomId
	}
	return ""
}

func (x *NotifyEventRoom) GetEmptyTimeout() uint32 {
	if x != nil && x.EmptyTimeout != nil {
		return *x.EmptyTimeout
	}
	return 0
}

func (x *NotifyEventRoom) GetMaxParticipants() uint32 {
	if x != nil && x.MaxParticipants != nil {
		return *x.MaxParticipants
	}
	return 0
}

func (x *NotifyEventRoom) GetCreationTime() uint64 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return 0
}

func (x *NotifyEventRoom) GetEnabledCodecs() []*livekit.Codec {
	if x != nil {
		return x.EnabledCodecs
	}
	return nil
}

func (x *NotifyEventRoom) GetMetadata() string {
	if x != nil && x.Metadata != nil {
		return *x.Metadata
	}
	return ""
}

func (x *NotifyEventRoom) GetNumParticipants() uint32 {
	if x != nil && x.NumParticipants != nil {
		return *x.NumParticipants
	}
	return 0
}

type RecordingInfoEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecordId      string                 `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	RecorderId    string                 `protobuf:"bytes,2,opt,name=recorder_id,json=recorderId,proto3" json:"recorder_id,omitempty"`
	RecorderMsg   string                 `protobuf:"bytes,3,opt,name=recorder_msg,json=recorderMsg,proto3" json:"recorder_msg,omitempty"`
	FilePath      *string                `protobuf:"bytes,4,opt,name=file_path,json=filePath,proto3,oneof" json:"file_path,omitempty"`
	FileSize      *float32               `protobuf:"fixed32,5,opt,name=file_size,json=fileSize,proto3,oneof" json:"file_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordingInfoEvent) Reset() {
	*x = RecordingInfoEvent{}
	mi := &file_plugnmeet_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordingInfoEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingInfoEvent) ProtoMessage() {}

func (x *RecordingInfoEvent) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingInfoEvent.ProtoReflect.Descriptor instead.
func (*RecordingInfoEvent) Descriptor() ([]byte, []int) {
	return file_plugnmeet_common_proto_rawDescGZIP(), []int{2}
}

func (x *RecordingInfoEvent) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *RecordingInfoEvent) GetRecorderId() string {
	if x != nil {
		return x.RecorderId
	}
	return ""
}

func (x *RecordingInfoEvent) GetRecorderMsg() string {
	if x != nil {
		return x.RecorderMsg
	}
	return ""
}

func (x *RecordingInfoEvent) GetFilePath() string {
	if x != nil && x.FilePath != nil {
		return *x.FilePath
	}
	return ""
}

func (x *RecordingInfoEvent) GetFileSize() float32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

type SpeechServiceEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *string                `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	TotalUsage    int64                  `protobuf:"varint,4,opt,name=total_usage,json=totalUsage,proto3" json:"total_usage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpeechServiceEvent) Reset() {
	*x = SpeechServiceEvent{}
	mi := &file_plugnmeet_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpeechServiceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeechServiceEvent) ProtoMessage() {}

func (x *SpeechServiceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeechServiceEvent.ProtoReflect.Descriptor instead.
func (*SpeechServiceEvent) Descriptor() ([]byte, []int) {
	return file_plugnmeet_common_proto_rawDescGZIP(), []int{3}
}

func (x *SpeechServiceEvent) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *SpeechServiceEvent) GetTotalUsage() int64 {
	if x != nil {
		return x.TotalUsage
	}
	return 0
}

type AnalyticsEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        *string                `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3,oneof" json:"file_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyticsEvent) Reset() {
	*x = AnalyticsEvent{}
	mi := &file_plugnmeet_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyticsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsEvent) ProtoMessage() {}

func (x *AnalyticsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsEvent.ProtoReflect.Descriptor instead.
func (*AnalyticsEvent) Descriptor() ([]byte, []int) {
	return file_plugnmeet_common_proto_rawDescGZIP(), []int{4}
}

func (x *AnalyticsEvent) GetFileId() string {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return ""
}

var File_plugnmeet_common_proto protoreflect.FileDescriptor

const file_plugnmeet_common_proto_rawDesc = "" +
	"\n" +
	"\x16plugnmeet_common.proto\x12\tplugnmeet\x1a\x14livekit_models.proto\"\xd7\x04\n" +
	"\x11CommonNotifyEvent\x12\x19\n" +
	"\x05event\x18\x01 \x01(\tH\x00R\x05event\x88\x01\x01\x123\n" +
	"\x04room\x18\x02 \x01(\v2\x1a.plugnmeet.NotifyEventRoomH\x01R\x04room\x88\x01\x01\x12?\n" +
	"\vparticipant\x18\x03 \x01(\v2\x18.livekit.ParticipantInfoH\x02R\vparticipant\x88\x01\x01\x12I\n" +
	"\x0erecording_info\x18\x04 \x01(\v2\x1d.plugnmeet.RecordingInfoEventH\x03R\rrecordingInfo\x88\x01\x01\x12I\n" +
	"\x0espeech_service\x18\x05 \x01(\v2\x1d.plugnmeet.SpeechServiceEventH\x04R\rspeechService\x88\x01\x01\x12-\n" +
	"\x05track\x18\x06 \x01(\v2\x12.livekit.TrackInfoH\x05R\x05track\x88\x01\x01\x12<\n" +
	"\tanalytics\x18\a \x01(\v2\x19.plugnmeet.AnalyticsEventH\x06R\tanalytics\x88\x01\x01\x12\x13\n" +
	"\x02id\x18\t \x01(\tH\aR\x02id\x88\x01\x01\x12\"\n" +
	"\n" +
	"created_at\x18\n" +
	" \x01(\x03H\bR\tcreatedAt\x88\x01\x01B\b\n" +
	"\x06_eventB\a\n" +
	"\x05_roomB\x0e\n" +
	"\f_participantB\x11\n" +
	"\x0f_recording_infoB\x11\n" +
	"\x0f_speech_serviceB\b\n" +
	"\x06_trackB\f\n" +
	"\n" +
	"_analyticsB\x05\n" +
	"\x03_idB\r\n" +
	"\v_created_at\"\xc1\x03\n" +
	"\x0fNotifyEventRoom\x12\x15\n" +
	"\x03sid\x18\x01 \x01(\tH\x00R\x03sid\x88\x01\x01\x12\x1c\n" +
	"\aroom_id\x18\x02 \x01(\tH\x01R\x06roomId\x88\x01\x01\x12(\n" +
	"\rempty_timeout\x18\x03 \x01(\rH\x02R\femptyTimeout\x88\x01\x01\x12.\n" +
	"\x10max_participants\x18\x04 \x01(\rH\x03R\x0fmaxParticipants\x88\x01\x01\x12(\n" +
	"\rcreation_time\x18\x05 \x01(\x04H\x04R\fcreationTime\x88\x01\x01\x125\n" +
	"\x0eenabled_codecs\x18\x06 \x03(\v2\x0e.livekit.CodecR\renabledCodecs\x12\x1f\n" +
	"\bmetadata\x18\a \x01(\tH\x05R\bmetadata\x88\x01\x01\x12.\n" +
	"\x10num_participants\x18\b \x01(\rH\x06R\x0fnumParticipants\x88\x01\x01B\x06\n" +
	"\x04_sidB\n" +
	"\n" +
	"\b_room_idB\x10\n" +
	"\x0e_empty_timeoutB\x13\n" +
	"\x11_max_participantsB\x10\n" +
	"\x0e_creation_timeB\v\n" +
	"\t_metadataB\x13\n" +
	"\x11_num_participants\"\xd5\x01\n" +
	"\x12RecordingInfoEvent\x12\x1b\n" +
	"\trecord_id\x18\x01 \x01(\tR\brecordId\x12\x1f\n" +
	"\vrecorder_id\x18\x02 \x01(\tR\n" +
	"recorderId\x12!\n" +
	"\frecorder_msg\x18\x03 \x01(\tR\vrecorderMsg\x12 \n" +
	"\tfile_path\x18\x04 \x01(\tH\x00R\bfilePath\x88\x01\x01\x12 \n" +
	"\tfile_size\x18\x05 \x01(\x02H\x01R\bfileSize\x88\x01\x01B\f\n" +
	"\n" +
	"_file_pathB\f\n" +
	"\n" +
	"_file_size\"_\n" +
	"\x12SpeechServiceEvent\x12\x1c\n" +
	"\auser_id\x18\x03 \x01(\tH\x00R\x06userId\x88\x01\x01\x12\x1f\n" +
	"\vtotal_usage\x18\x04 \x01(\x03R\n" +
	"totalUsageB\n" +
	"\n" +
	"\b_user_id\":\n" +
	"\x0eAnalyticsEvent\x12\x1c\n" +
	"\afile_id\x18\x01 \x01(\tH\x00R\x06fileId\x88\x01\x01B\n" +
	"\n" +
	"\b_file_idB\x9d\x01\n" +
	"\rcom.plugnmeetB\x14PlugnmeetCommonProtoP\x01Z2github.com/mynaparrot/plugnmeet-protocol/plugnmeet\xa2\x02\x03PXX\xaa\x02\tPlugnmeet\xca\x02\tPlugnmeet\xe2\x02\x15Plugnmeet\\GPBMetadata\xea\x02\tPlugnmeetb\x06proto3"

var (
	file_plugnmeet_common_proto_rawDescOnce sync.Once
	file_plugnmeet_common_proto_rawDescData []byte
)

func file_plugnmeet_common_proto_rawDescGZIP() []byte {
	file_plugnmeet_common_proto_rawDescOnce.Do(func() {
		file_plugnmeet_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_plugnmeet_common_proto_rawDesc), len(file_plugnmeet_common_proto_rawDesc)))
	})
	return file_plugnmeet_common_proto_rawDescData
}

var file_plugnmeet_common_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_plugnmeet_common_proto_goTypes = []any{
	(*CommonNotifyEvent)(nil),       // 0: plugnmeet.CommonNotifyEvent
	(*NotifyEventRoom)(nil),         // 1: plugnmeet.NotifyEventRoom
	(*RecordingInfoEvent)(nil),      // 2: plugnmeet.RecordingInfoEvent
	(*SpeechServiceEvent)(nil),      // 3: plugnmeet.SpeechServiceEvent
	(*AnalyticsEvent)(nil),          // 4: plugnmeet.AnalyticsEvent
	(*livekit.ParticipantInfo)(nil), // 5: livekit.ParticipantInfo
	(*livekit.TrackInfo)(nil),       // 6: livekit.TrackInfo
	(*livekit.Codec)(nil),           // 7: livekit.Codec
}
var file_plugnmeet_common_proto_depIdxs = []int32{
	1, // 0: plugnmeet.CommonNotifyEvent.room:type_name -> plugnmeet.NotifyEventRoom
	5, // 1: plugnmeet.CommonNotifyEvent.participant:type_name -> livekit.ParticipantInfo
	2, // 2: plugnmeet.CommonNotifyEvent.recording_info:type_name -> plugnmeet.RecordingInfoEvent
	3, // 3: plugnmeet.CommonNotifyEvent.speech_service:type_name -> plugnmeet.SpeechServiceEvent
	6, // 4: plugnmeet.CommonNotifyEvent.track:type_name -> livekit.TrackInfo
	4, // 5: plugnmeet.CommonNotifyEvent.analytics:type_name -> plugnmeet.AnalyticsEvent
	7, // 6: plugnmeet.NotifyEventRoom.enabled_codecs:type_name -> livekit.Codec
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_plugnmeet_common_proto_init() }
func file_plugnmeet_common_proto_init() {
	if File_plugnmeet_common_proto != nil {
		return
	}
	file_plugnmeet_common_proto_msgTypes[0].OneofWrappers = []any{}
	file_plugnmeet_common_proto_msgTypes[1].OneofWrappers = []any{}
	file_plugnmeet_common_proto_msgTypes[2].OneofWrappers = []any{}
	file_plugnmeet_common_proto_msgTypes[3].OneofWrappers = []any{}
	file_plugnmeet_common_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_plugnmeet_common_proto_rawDesc), len(file_plugnmeet_common_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_plugnmeet_common_proto_goTypes,
		DependencyIndexes: file_plugnmeet_common_proto_depIdxs,
		MessageInfos:      file_plugnmeet_common_proto_msgTypes,
	}.Build()
	File_plugnmeet_common_proto = out.File
	file_plugnmeet_common_proto_goTypes = nil
	file_plugnmeet_common_proto_depIdxs = nil
}
